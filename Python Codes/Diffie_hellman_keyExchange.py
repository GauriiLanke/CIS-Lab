# Diffie-Hellman Key Exchange Algorithm 

def is_primitive_root(alpha, q):
    required_set = set(num for num in range(1, q)) #required set of numbers from 1 to q-1
    actual_set = set(pow(alpha, powers, q) for powers in range(1, q)) #actual set of numbers generated by alpha
    return required_set == actual_set #checking if both sets are equal

print("\nDiffie-Hellman Key Exchange Algorithm\n")
q = int(input("Enter a prime number (q): "))

while True:
    alpha = int(input("\nEnter a primitive root (alpha): "))
    if is_primitive_root(alpha, q):
        print(f"{alpha} is a valid primitive root of {q}.")
        break
    else:
        print(f"{alpha} is NOT a primitive root of {q}. Please try again.")

# Private keys
a = int(input("\nEnter User A private key (a): "))
b = int(input("Enter User B private key (b): "))

# Public keys
A = pow(alpha, a, q)  # (alpha^a) mod q
B = pow(alpha, b, q)  # (alpha^b) mod q

print(f"\nUser A Public Key (A): {A}")
print(f"User B Public Key (B): {B}")

# Secret keys
secret_A = pow(B, a, q)  # (B^a) mod q
secret_B = pow(A, b, q)  # (A^b) mod q

print(f"\nAlice's Shared Secret Key: {secret_A}")
print(f"Bob's Shared Secret Key: {secret_B}")

if secret_A == secret_B:
    print("\nKey Exchange Successful! Shared secret key established.")
else:
    print("\nKey Exchange Failed!")
